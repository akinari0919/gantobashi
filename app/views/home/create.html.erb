<%= render 'layouts/header' %>

<main>
  <div class="create-contents" id="create-contents">
    <div class="camera">
      <div class="camera-bd"></div>
      <video id="video" autoplay playsinline width="300" height="300"></video>
      <canvas id="canvas" width="300" height="300"></canvas>
    </div>  
    <div class="submit-btn">
      <p class="button-41" id="shatter" onclick="init()">ガン飛ばす</p>
      <p class="button-42" id="dummy">解析中...</p>
    </div>
    <div class="comment">
      <p id="result"></p>
    </div>
    <div class="btn-2">
      <p class="button-40" id="retry" onclick="retry()">撮り直す</p>
      <p class="button-40" id="detail" onclick="detail();">判定詳細</p>
    </div>
  </div>

<%= render 'layouts/footer' %>

<script>
  $('#canvas').hide();
  $('#dummy').hide();
  $('#retry').hide();
  $('#detail').hide();
  // カメラ設定
  const constraints = {
    video: {
      width: 300,
      height: 300,
      facingMode: "user"   // フロントカメラを利用する
    }
  };

  // カメラを<video>と同期
  navigator.mediaDevices.getUserMedia(constraints)
  .then( (stream) => {
    video.srcObject = stream;
    video.onloadedmetadata = (e) => {
      video.play();
    };
  })
  .catch( (err) => {
    console.log(err.name + ": " + err.message);
    window.location.href = "/select";
  });

  const URL = "https://teachablemachine.withgoogle.com/models/3tSiNOSPs/";

  let model, labelContainer, maxPredictions;

  async function init() {
    document.getElementById('shatter').disabled = true;
    $('#video').hide();
    $('#shatter').hide();
    $('#canvas').show();
    $('#dummy').show();
    $(this).html( $(this).data('loading-text') );
    
    // canvasに静止画を入れる
    var canvas = document.getElementById("canvas")
    canvas.getContext("2d").drawImage(video, 0, 0, 300, 300)

    // teachablemachineのモデルURLを読み込む
    const modelURL = URL + "model.json";
    const metadataURL = URL + "metadata.json";

    // モデルのイメージを格納する
    model = await tmImage.load(modelURL, metadataURL);
    maxPredictions = model.getTotalClasses();

    // 結果を出す為のlavelcontainerをDOMに要素追加する
    labelContainer = document.getElementById("label-container");
    window.requestAnimationFrame(loop);
  }

  async function loop() {
    // 予測は、画像、ビデオ、またはキャンバスのhtml要素を取り込むことができます
    const prediction = await model.predict(canvas);

    // predictionの数値によって結果を変える
    if (prediction[0].probability.toFixed(2)> 0.1) {
      const base64 = canvas.toDataURL('image/jpeg').replace(/data:.*\/.*;base64,/, '');
      $.ajax({
        url: '/check',
        type: 'POST',
        data: {
            image: base64
          },
        headers: {
            'X-CSRF-Token' : $('meta[name="csrf-token"]').attr('content')
          },
      })
        .then(
          data => $('#result').append(data.body),
          error => $('#result').append('解析失敗m(_ _)m')
        );
    } else {
      $('#result').html('それは違う！')
    };
    $('#result').show();
    $('#dummy').hide();
    $('#retry').show();
    $('#detail').show();
  }

  function retry(){
    $('#video').show();
    $('#shatter').show();
    $('#canvas').hide();
    $('#dummy').hide();
    $('#result').empty();
    $('#retry').hide();
    $('#detail').hide();
  }

  function detail(){
    $('create-contents').hide();
    // window.location.href = '/show';
    // $('#canvas').show();
    // $('#comment').show();
  }
</script>
